**Episode-01 - Inception**

1) html:5 :- <script>
        const heading = document.createElement("h1");
        heading.innerHTML = "Hello Word!";
        const root = document.getElementById("root");
        root.appendChild(heading)
       </script> 

2) const heading = React.createElement("h1", {id:"heading"}, "Hello World!");
    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(heading);

3) React.createElement is an {Object} => HTML (Browser Understand) 

4) const parent = React.createElement(
  "div",
  { id: "parent" },
  React.createElement("div", { id: "child" }, [
    React.createElement("h1", { key: "h1" }, "I am Good!"),
    React.createElement("h2", { key: "h2" }, "I am Good!"),
    React.createElement("h3", { key: "h3" }, "I am Good!"),
  ])
);
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(parent);

5) git Process : - Create New Repo , git init , git branch -M main, git add . , git commit -m "Episode-01", git remote set-url origin git://https://github.com/GGK-UI/My-React.git, git push orgin main,

**Episode-02 - Igniting My App**

1)npm init will install package manager files in the project
2)package.json is the configuration file for NPM
3)NPM helps to install dependencies like bundlers like webpack,parcel,babel,vite e.t.c & npm install -D parcel
4)Two types of dependencies packages Dev dependencies(Development) & Normal dependencies(Production)
5)Cart(^) minor version update & Tilde(~) Major version update 
6)package-lock.json is a file which will keep track of dependencies exact version.
7)Parcel depends on other dependencies which is known as Transitive dependencies.
8)Node Modules is the collection of dependencies & its huge.
9)If we have package.json / package-lock.json file we can regenerate the node modules.
10)npx parcel index.html its an executing package(npx)
11)its not recommended to install react from CDN links right way is to do with npm.
12)npm install react
13)npm install react-dom
14) # All About PARCEL # 
    *Dev Build
    *Local Server
    *HMR - Hot Module Replacement
    *File Watching Algorithm - Written C++
    *Faster Builds - Caching the Files
    *Image Optimization
    *Minification / Bundling / Compressing Files
    *Consistant Hashing
    *Code Splitting
    *Differential Bundling - Support Older Browsers
    *Error Display View , Diagnostic & Error Handling
    *Tree Shaking - Remove Unused Code
    *Different Dev & Pro bundles
    (To create a Prod Build npx parcel build index.html & make sure to check package.json & remove this "main": "App.js" which create dist folder)
    *From HTTP to HTTPS (for more details visit parcejs.org)
    15)Local -> Git -> Server -> User (Local Packages are Different from Server)
    16)To run Web App on customize/all Browsers Add below in package.json file
        "browserList": [
        "last 2 Chrome version",
        "last 2 Firefox version"
        ] (for more details visit browserslist.dev)
    
**Episode-03 - Laying the Foundation**

1)npx parcel index.html to replace this command we need to create a script in package.json for dev mode.
    "scripts": {
    "start": "parcel index.html",
    "build": "parcel build index.html",
    "test": "jest"
  }, (Now Can use npm start / npm run build)
2)To Build a Project go to package.json which have all the scriptted commands & its an industry standards in companies.
3)When React was built below is the way of inserting Code & leads to pyramid / clumsy
    const heading = React.createElement("h1", { id: "heading" }, "Just React");
    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(heading);
    #JSX - JavaScript XML#
4)JSX(JavaScript XML) Introduced as a convention to merge HTML & JavaScript to create HTML like syntax
    const jsx = <h1 id:"jsx">"I love JSX"<h1>;  React Element
5)JSX Transpilation before reaching to JS Engine with the help of Parcel -> Babel Package / Bundlers. Babel is JS Compiler.
    (for more details visit https://babeljs.io/)
6)JSX is a -> React.createElement -> ReactElement -> JS Object -> HTML Element (Render)
7)JSX Attributes :- id:"" - className="" - tabIndex="" - 
8)in jsx single line code is valid , if multiline code is needed then it should be wrap with () to Understand its an jsx for babel.
9)JSX Sanitise the data & CrossScrippting {data}
    #COMPONENTS#
10)Components are Two Types in React *Class Based Components & *Functional Components.
11)Functional Components always Name it with Capital / CamelCase Letters

    ! function HeaderComponent() => <h1>I am Functional Component<h1/>

    ! function HeaderComponent2() => <h1>I am Functional Component<h1/>

    ! function HeaderComponent3() => {
            return 
           ( <h1 className="head" 
            tabIndex="5"
            >I am Functional Component
            <h1/>)
        };

    ! function HeaderComponent3  = function () {
       return (
            <h1 className="heading"
            >I am Functional Component
            <h1/>
        )
    }; 

    <- React Function Component is an Function which will return a piece of JSX Code / ReactElement  ->
12) Component Composition is composing two components one inside another
    // React Component / component Example

        const TitleComponent = () => <h1 id="heading" tabIndex="5">I am Just React</h1>;

        const HeadingComponent = () => (
        <div id="container">
            <TitleComponent/>
            <h1 className="heading">I am Function Component</h1>
        </div>
        );


        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render(<HeadingComponent/>);

**Episode-04 - Show The Code** 

1)Planning & Visual UX for creating any Web App is important
    *Header, *Body, *Footer, customize requirements like Logo , search bar , container e.t.c 
2)We can write inline CSS like jsx HTML in JS its not recommended to use inline CSS.
    const bgColor =  style: bagroundColor: yellow;

        <restro-Card>{bfColor}</restro-Card>

    <div className="resCard" style= {{bagroundColor: "ff00f"}}> </div>

    ##PROPS##
3)Its an short form of Properties & to pass dyanamic data to a component.
4)Props are just arrguments to a function.
5) #Config Driven UI# UI is Driven by Configuration -> API & Data for Specific Loaction e.t.c UI is Changing as per Backend Data.
6)UI Layer & Data Layer => Web App ("id": "362596",)
7)To Check API's -> Open Website -> Click Inspect -> Go to Network Tab -> Fetch/XHR -> v5? -> Preview ->  Open Response ->  Open Pretty JSON.
8)Just Created Re-Usable Card Component & Render it with Dynamic Data.
    ##Best Practises of Code Review##
9)Code Optimization is Very important
10)Use Destructuring  of Arry / Object
11) Use Map() / for Loop to iittrating overa an arry of list e.t.c
12)When every use map() function mention key="unique Id" Property. which stops Re-rendering & avoid unnecessary rendering on overall unchange UI/Cards.
13)its ok to use & Some people Also can use Index Property as well incase if there is no ID in data. 
   But react it self says that index as keys are bad Practise. If any Order are Number changes it will be an mess.

**Episode-05 - Let's Get Hooks**
1)Re-Structure Code / Folder Structure / Divide The Components
2) There are Two Types of Exports & Imports

    Default Component
    * export default component;
    * import component from "path"

    Named Component/JS.file
    *export constant / Component
    *import { constant / component} from "path"
    
    ## HOOKS ##
    1)Hooks are normal JS Utility functions & written by FaceBook Developers in NPM
    2)Very Important Hooks
        * Use State
        * Use Effect
    3)Use State Hooks :- It is used to maintain the state variable.
        const [stateVariable , SetStateVariable] = useState([
            {DATA}
        ]);
        SetStateVariable();
        its an Arry Destructuring on the fly.
    4)When ever a State Variable updates React will Re-render the component.
    5)React Uses Re-consilation Algorithm which is also known as React Fiber.
    6)Virtual DOM is a Re-Presentation of Actual DOM -> React Elements -> Nested Object.
    7)Diff Algorithm will find the difference between two virtual dom & update with latest render cycle.
    8)In React-16 A new Algorithm to update the DOM is known as React Fiber. Example:- Git Div!
    9)React is doing efficient DOM Manupulation -> virtual DOM.
    10)Updating the UI very Fast by finding out the diff between two DOM's & Updating Third UI.

    **Episode-06 - Exploring The Word**
1)Monolith Architructure :- API,AUTH,DATA,UI,Backend... e.t.c
    A small changes in UI or Any of the above needs to build/compiled completed project.
2)Micro Services Architructure :- Different Services & Tech Stacks for Different Jobs. Like (UI,AUTH,BACKEND,..e.t.c)
    which is known as Seperations of Concerns & Single Responsiblity Principle.
3)All the above services run on their own ports. & can be deploy on their own URL's.
4)Two Approcahes to Fetch The Data From API's
   Approach - 1) Loads -> Api -> Render
   Approach -2) Loads -> Render-UI ->Api -> Re-render-UI with Data
   2nd Approch is better User Experiance - UX. React RendersCycles are very fast.

5)* Use Effect Hook
    useEffect(() => {} , [])
    Use Effect is a utlity function it will be called the callback function one the complete body component is rendered.
    If we have to write something which should render after the body component then write in useEffect. 
6)Conditual Rendering :- It is subject to contion based rendering.
7)When ever State variables update react reconcil/Re-Rendreing the component.

    **Episode-07 - Finding The Path** 
1)useEffect is called on every time of component render. the dependency array changes the behaviour.
    if there is no dependency arry it will render on every time component render. 
    if there is {btnName} in dependency arry it will render on every time {btnName} update.
2)useState , Never create useState on out of component.. always write inside or above return ().
    dont use useState in if() {}  else{} conditions.   & for() loop.     
    
    ## ROUTING ## 
1)import { createBrowserRouter , RouterProvider } from "react-router-dom";
    give an path object for routing components.
2)import { useRouteError } from "react-router-dom";
    for error handling in react & show error status & error ststus text
3)Child Routing :- It is to handle nested routes.
    import { createBrowserRouter, RouterProvider, Outlet } from "react-router-dom";
4)Dont use Anchor Tag in React. The wole page got refreshed.
    we can navigate to new page with out reloading the new page.
    import { Link } from "react-router-dom";
    Link Component <link />
    <Link to="/">Home</Link>
    There are two types of routing in web apps
    * Client side routing (make a Non-network call & data coming from client like different internal components getting interchanged)
    * Server side routing (make a network call & data coming from server)
5) *Dynamic Routing with Reusable Component.
    { path: "/restaurantMenu/:resId" , element: < RestroMenu />} :resId will initiate dynamic routing based on restro id's.
6) *useParms will help to go dynamic routing based on parameters & resId.
    import { useParams } from "react-router-dom";
